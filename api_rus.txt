1. Открытие сервиса

Клиентское приложение должно открыть соединение websocket по адресу, который предоставляет провайдер услуг.
Сразу же после успешного соединения по websocket, необходимо отправить запрос на открытие сервиса (open)[4.1.a]. 
В качестве параметра передается уникальный идентификатор клиента (<session_id>), который также предоставляет 
провайдер услуг. Если сервис успешно открыт, то в ответ придет сообщение init [4.1.b]. Это сообщение будет 
содержать в себе идентификатор клиента. Если произошла ошибка открытия сервиса, то сервер вернет сообщение result[4.1.c].
Если на сервере уже была открыта сессия для данного <session_id>, то при успешном открытии новой сессии, предыдущая
закрывается. При этом клиентское приложение, открывшее предыдущую сессию получит уведомление о ее закрытии (finish)[4.1.d],
и сервер закроет соединение.

2. Удержание открытой сессии.

Для удержание сервиса открытым, необходимо периодически пинговать сервер специальным ping запросом[4.2]. Ping продлевает 
время жизни открытой сессии на сервисе, и позволяет определить возможные задержки в канале связи между сервисом и клиентом.
В качестве параметра необходимо указать уникальный идентификатор клиента <session_id>. Опционально можно указать 
идентификатор запроса пинга <ping_id>, но делать это необязательно.

3. Подписывание на рыночные данные. 

Рыночные данные, которые доступны, определяются провайдером услуг. Всего доступны три вида данных[5]:

- Котировка (спред). Котировка содержит в себе текущие значения спроса и предложения[5.1].
- Сделка. Сделка содержит в себе цену сделки и ее объем[5.2]. 
- Последняя цена, которая представляет собой усредненный спред, в котором также присутствуют параметры изменения 
этой цены с момента последнего закрытия торговой сессии по инструменту[5.3]

Каждое сообщение содержит в себе тикер и время UTC.

Для подписки необходимо отправить на сервер запрос на обновление списка подписанных инструментов[4.3], или на его дополнение[4.4], 
в котором указывается уникальный идентификатор клиента <session_id>, а также список тикеров. 

Запрос на обновление списка подписки[4.3] отменяет подписку на инструменты, которые не входят в переданный список тикеров, 
и добавляет ее на те инструменты из списка, на которые текущая подписка отсутствовала. Таким образом нет необходимости отменять 
подписку на ненужные инструменты, эти действия осуществляются одним запросом. 
Также для полной отмены подписки необходимо передать запрос[4.3] с пустым списком инструментов.

Для того, чтобы дополнить список подписки на сервере, необходимо отправить запрос на добавление инструментов в текущий список
подписки[4.4]. При этом если инструмент уже был подписан, то его подписка сохраняется, а если нет - инструмент добавляется в 
текущий список подписанных инструментов. Запрос на дополнение подписки не отменяет подписку на инструменты, которые отсутствуют 
в списке переданных тикеров. Соответственно, данный запрос с пустым списком не вносит никаких изменений, т.е. в отличие от 
запроса [4.3] не отменяет подписку.

4. Приложение. Формат сообщений

4.1. Открытие соединения.

4.1.a Запрос на открытие: 

	{ "msg":"open", "sid":"<session_id>" }

4.1.b Ответ успешного открытия сервиса: 
	
	{ "msg":"init", "sid":"<session_id>" }

4.1.c Ответ неудачного открытия сервиса: 
	
	{ "msg":"result", "respCode":<код_ошибки>, "message":"<описание_ошибки>" }

4.1.d Сообщение сервера о том, что открыта новая сессия, а текущая закрыта:

	{ "msg":"finish", "sid":"<session_id>" }

4.2. Пингование сервера:

Запрос пинга: 

	{ "msg":"ping", "sid":"<session_id>",  "pid":"<ping_id>" }

Ответ сервера: 
	
	{ "msg":"ping", "sid":"<session_id>",  "pid":"<ping_id>" }

4.3. Подписка на инструменты:

Запрос подписки: 
	
	{ "msg":"update", "sid":"<session_id>", "tickers":[ "ticker1", "ticker2", ... "tickerN" ] }

4.4. Добавление инструментов в список подписки на сервере.

Запрос подписки: 

	{ "msg":"add", "sid":"<session_id>", "tickers":[ "ticker1", "ticker2", ... "tickerN" ] }

5. Формат сообщений

5.1. Котировка 

{
	"msg":"quote",
	"ticker":"<ticker>"
	"bid":"<bid_price>",
	"ask":"<ask_price>",
	"utcdt":"<dd-MM-yyyy HH:mm:ss.ffffff>"
}

5.2. Last Price

{
	"msg":"lastprice"
	"ticker":"<ticker>"
	"last":"<last_price>",
	"netchange":"<netchange>",
	"netchangepers":"<netchangepercent>%",
	"utcdt":"<dd-MM-yyyy HH:mm:ss.ffffff>"
}

5.3. Сделка

{
	"msg":"trade"
	"ticker":"<ticker>"
	"price":"<trade_price>",
	"size":"<trade_size>",
	"utcdt":"<dd-MM-yyyy HH:mm:ss.ffffff>"
}

6. Явный запрос на рыночные данные.

Массив последний рыночных данных может быть получен обычным GET запросом по протоколу HTTP/HTTPS. 
Формат запроса:

?sid={<session_id>}&tickers={<list_of_tickers>},

где 
<session_id> - уникальный идентификатор клиента, которые предоставляется провайдером услуг,
<list_of_tickers> - список тикеров инструментов, разделенный ;, например tickers=ticker1;ticker2;...;tickerN

Еслли запрос успешен, то сервер вернет ответ типа result, с кодом ответа ""respCode"":"0", а в поле message
будет присутствовать json-структура, которая представляет собой массив сообщений, описанных в [5].

В случае ошибки сервер вернет сообщение result с кодом ошибки[7], и причиной ошибки в поле message.

7. Коды в ответах сервера (Сообщение result).

int VALUE_RESP_SUCCESS		= 0;

Запрос успешно обработан. Данный ответ приходит в случае успешноло выполнения запроса на получение рыночных данных [6].
В параметре message будет присутсвовать json-структура с последними рыночными данными по инструментам, список тикеров 
которых был передан в запросе.

int VALUE_RESP_INVPARAM		= 1;

Сервер вернет ответ с эти кодом, если в запросе присутсвует неверный параметр. В поле message будет название параметра,
который содержит ошибку.

int VALUE_RESP_FORBIDDEN	= 4;

Сервер вернет этот ответ, если его текущаая конфигурация запрещает выполнение этого запроса, или идентификатор клиента 
заблокирован.

int VALUE_RESP_REJECTED		= 7;

Сервер вернет этот код ответа, если по каким-то причинам запрос пользователя отклонен. Причина будет указана в поле message/